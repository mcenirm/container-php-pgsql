name: Docker

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

on:
  #schedule:
  #  - cron: '22 12 * * *'
  push:
    branches: [ "main" ]
    # Publish semver tags as releases.
    tags: [ 'v*.*.*' ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

env:
  image_name: php-pgsql
  push_github: ${{ github.event_name != 'pull_request' }}
  push_dockerhub: ${{ github.event_name != 'pull_request' && secrets.DOCKER_HUB_USERNAME != '' }}


jobs:
  build:
    strategy:
      fail-fast: true
      matrix:
        from_image:
          - "docker.io/php"
        from_tag:
          - "7.4-apache"
          - "8.0-apache"
          - "8.1-apache"
          - "8-apache"

    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
#      # This is used to complete the identity challenge
#      # with sigstore/fulcio when running outside of PRs.
#      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

#      # Install the cosign tool except on PR
#      # https://github.com/sigstore/cosign-installer
#      - name: Install cosign
#        if: env.push_github || env.push_dockerhub
#        uses: sigstore/cosign-installer@f3c664df7af409cb4873aa5068053ba9d61a57b6 #v2.6.0
#        with:
#          cosign-release: 'v1.11.0'


      # Workaround: https://github.com/docker/build-push-action/issues/461
      - name: Setup Docker buildx
        uses: docker/setup-buildx-action@8c0edbc76e98fa90f69d9a2c020dcb50019dc325

      - name: Prepare images list
        id: prepare_images_list
        env:
          github_repository_owner: ${{ github.repository_owner }}
          docker_hub_namespace: ${{ secrets.DOCKER_HUB_NAMESPACE }}
        run: |
          exec >> $GITHUB_OUTPUT
          echo 'images<<E9H0Qej0C5j7A0MM'
          [ "$push_github"    = true ] && printf '%q\n' "ghcr.io/$github_repository_owner/$image_name"
          [ "$push_dockerhub" = true ] && printf '%q\n' "docker.io/$docker_hub_namespace/$image_name"
          echo 'E9H0Qej0C5j7A0MM'

      # https://github.com/docker/login-action
      - name: Log in to GitHub Container Registry
        if: env.push_github
        uses: docker/login-action@f4ef78c080cd8ba55a85445d5b36e214a81df20a
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # https://github.com/docker/login-action
      - name: Log in to Docker Hub
        if: env.push_dockerhub
        uses: docker/login-action@f4ef78c080cd8ba55a85445d5b36e214a81df20a
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@57396166ad8aefe6098280995947635806a0e6ea
        with:
          images: ${{ steps.prepare_images_list.outputs.images }}
          flavor: |
            latest=false
            prefix=${{ matrix.from_tag }}-

      # Build and push Docker image with Buildx (don't push on PR)
      # https://github.com/docker/build-push-action
      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@c56af957549030174b10d6867f20e78cfd7debc5
        with:
          context: .
          file: Containerfile
          build-args: |
            FROM_IMAGE=${{ matrix.from_image }}
            FROM_TAG=${{ matrix.from_tag }}
          push: ${{ env.push_github || env.push_dockerhub }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max


#       # Sign the resulting Docker image digest except on PRs.
#       # This will only write to the public Rekor transparency log when the Docker
#       # repository is public to avoid leaking data.  If you would like to publish
#       # transparency data even for private images, pass --force to cosign below.
#       # https://github.com/sigstore/cosign
#       - name: Sign the published Docker image
#         if: env.push_github || env.push_dockerhub
#         env:
#           COSIGN_EXPERIMENTAL: "true"
#         # This step uses the identity token to provision an ephemeral certificate
#         # against the sigstore community Fulcio instance.
#         run: echo "${{ steps.meta.outputs.tags }}" | xargs -I {} cosign sign {}@${{ steps.build-and-push.outputs.digest }}
